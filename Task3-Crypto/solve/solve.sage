from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
from Crypto.Util.number import long_to_bytes
from hashlib import sha256

x1= 6225359899529610073120322484067232763965680460072377340044722238375214733509938567404661636714973365319613274895839584431689753031555332882578675612671117
x2= 586280304587097343971795478048441214399797307293031319388443147655115962265027282416851128519020668601981743800102328468167234861842519269396974935965690
encrypt=b'\xe2\xa4Ko\xb6\xc6\x9b\n\x95\xcd\xac(W\xb6\xa7\x81'
iv=b';3hu\xd6\xce\xe8\xcf\x12\x06\x8f\xd3\x15\tT\xba'
p=6811640204116707417092117962115673978365477767365408659433165386030330695774965849821512765233994033921595018695941912899856987893397852151975650548637533

F = GF(p)
x1, x2 = F(x1), F(x2)
b = x1 * x2
a = -(x1 + x2)

Gx, Gy =926644437000604217447316655857202297402572559368538978912888106419470011487878351667380679323664062362524967242819810112524880301882054682462685841995367, 4856802955780604241403155772782614224057462426619061437325274365157616489963087648882578621484232159439344263863246191729458550632500259702851115715803253

E = EllipticCurve(F, [a, b])
G = E(Gx, Gy)

order = 11

hash = sha256()
for x in range(1, order):
    secret = (G * x).xy()[0]
    hash = sha256()
    hash.update(long_to_bytes(int(secret)))
    key = hash.digest()[16:32]
    cipher = AES.new(key, AES.MODE_CBC, iv)
    decrypt = cipher.decrypt(encrypt)
    print(f"x={x}, decrypt={decrypt}")




